AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Morningstar Cloud Day Demo

  SAM Template for Lambda and Support Infrastucture to run the Morningstar Cloud Day Demo

Globals:
  Function:
    Timeout: 180

Parameters:
  BucketName:
    Type: String
    Default: tempalpacatraderbucket
  AlapcaId:
    Type: String
    Default: alpacaid
  AlpacaSecret:
    Type: String
    Default: alpacasecret
  FinnhubToken:
    Type: String
    Default: finnhubtoken

Resources:
  # My Functions
  WatchListUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WatchListUpdater
      Role: !GetAtt LambdaRole.Arn
      CodeUri: watchlist_updater/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
      Events:
        WatchListUpdater:
          Type: Api
          Properties:
            Path: /watchlistupdate
            Method: get
      Layers:
        - !Ref Libs
  StockRankerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StockRankerFunction
      Role: !GetAtt LambdaRole.Arn
      CodeUri: stock_ranker/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
          GET_FIN_FUNC_NAME: GetFinancials
      Architectures:
        - x86_64
      Events:
        StockRankerEvent:
          Type: Api
          Properties:
            Path: /stockranker
            Method: get
      Layers:
        - !Ref Libs
  GetFinancialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetFinancials
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./get_financials
      Runtime: python3.8
      Handler: app.lambda_handler
      Architectures:
        - x86_64
      Environment:
        Variables:
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
          BUCKET_NAME: !Ref BucketName
          FINNHUB_TOKEN: !Ref FinnhubToken
      Events:
        GetFinancials:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /getfinancials
            Method: get
      Layers:
        - !Ref Libs
  BuyStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BuyStocks
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./buy_stocks
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
      Events:
        BuyStocksEvent:
          Type: Api
          Properties:
            Path: /buystocks
            Method: get
      Layers:
        - !Ref Libs
  Libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLibs
      ContentUri: libs
      CompatibleRuntimes:
        - python3.8
      CompatibleArchitectures:
        - x86_64
    Metadata:
      BuildMethod: python3.8

  # Function Resource Dependencies
  AlpacaTraderBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicReadWrite
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub
        - 'stockTraderLambdaRole-${stackName}'
        - stackName: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com' # Explicit execution role for all four Lambdas
                - 'states.amazonaws.com' # Allows the Step Functions to execute the Lambdas
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/retire-early.asl.json
      DefinitionSubstitutions:
        WatchListUpdaterFunctionArn: !GetAtt WatchListUpdaterFunction.Arn
        StockRankerFunctionArn: !GetAtt StockRankerFunction.Arn
        BuyStocksFunctionArn: !GetAtt BuyStocksFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        TradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 minute)"
      Role: !GetAtt LambdaRole.Arn
  TransactionTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  WatchListUpdaterFunctionArn:
    Description: "Watchlist Updater Function ARN"
    Value: !GetAtt WatchListUpdaterFunction.Arn
  StockRankerFunctionArn:
    Description: "Stock Ranker Function ARN"
    Value: !GetAtt StockRankerFunction.Arn
  GetFinancialsFunctionArn:
    Description: "Get Financials Function ARN"
    Value: !GetAtt GetFinancialsFunction.Arn
  BuyStocksFunctionArn:
    Description: "Buy Stocks Function ARN"
    Value: !GetAtt BuyStocksFunction.Arn
