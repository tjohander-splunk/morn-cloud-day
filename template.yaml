AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Morningstar Cloud Day Demo

  SAM Template for Lambda and Support Infrastucture to run the Morningstar Cloud Day Demo

Globals:
  Function:
    Timeout: 180

Parameters:
  BucketName:
    Type: String
    Default: tempalpacatraderbucket
  AlapcaId:
    Type: String
    Default: alpacaid
  AlpacaSecret:
    Type: String
    Default: alpacasecret
  FinnhubToken:
    Type: String
    Default: finnhubtoken
  EC2Ami:
    Type: String
    Description: The AMI to use for the Otel Collector Gateway Instance Host
    Default: 'ami-026b57f3c383c2eec'
  EC2InstanceType:
    Type: String
    Description: The Instance Type for the Otel Collector Gateway Instance Host
    Default: 't2.micro'
  EC2AvailabilityZone:
    Type: String
    Description: The Availability Zone to use for the Otel Collector Gateway Instance Host
    Default: 'us-east-1b'
  EC2KeyPairName:
    Type: String
    Description: The name of the SSH key authorized to access the EC2 Instance

Resources:
  # My Functions
  WatchListUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WatchListUpdater
      Role: !GetAtt LambdaRole.Arn
      CodeUri: watchlist_updater/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !GetAtt PrivateSubnet1.SubnetId
      Events:
        WatchListUpdater:
          Type: Api
          Properties:
            Path: /watchlistupdate
            Method: get
      Layers:
        - !Ref Libs
  StockRankerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StockRankerFunction
      Role: !GetAtt LambdaRole.Arn
      CodeUri: stock_ranker/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
          GET_FIN_FUNC_NAME: GetFinancials
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !GetAtt PrivateSubnet1.SubnetId
      Events:
        StockRankerEvent:
          Type: Api
          Properties:
            Path: /stockranker
            Method: get
      Layers:
        - !Ref Libs
  GetFinancialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetFinancials
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./get_financials
      Runtime: python3.8
      Handler: app.lambda_handler
      Architectures:
        - x86_64
      Environment:
        Variables:
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
          BUCKET_NAME: !Ref BucketName
          FINNHUB_TOKEN: !Ref FinnhubToken
      Events:
        GetFinancials:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /getfinancials
            Method: get
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !GetAtt PrivateSubnet1.SubnetId
      Layers:
        - !Ref Libs
  BuyStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BuyStocks
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./buy_stocks
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          BUCKET_NAME: !Ref BucketName
          ALPACA_ID: !Ref AlapcaId
          ALPACA_SECRET: !Ref AlpacaSecret
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !GetAtt PrivateSubnet1.SubnetId
      Events:
        BuyStocksEvent:
          Type: Api
          Properties:
            Path: /buystocks
            Method: get
      Layers:
        - !Ref Libs
  Libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLibs
      ContentUri: libs
      CompatibleRuntimes:
        - python3.8
      CompatibleArchitectures:
        - x86_64
    Metadata:
      BuildMethod: python3.8

  # Function Resource Dependencies
  AlpacaTraderBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicReadWrite
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: stockTraderLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'states.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/retire-early.asl.json
      DefinitionSubstitutions:
        WatchListUpdaterFunctionArn: !GetAtt WatchListUpdaterFunction.Arn
        StockRankerFunctionArn: !GetAtt StockRankerFunction.Arn
        BuyStocksFunctionArn: !GetAtt BuyStocksFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        TradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 minute)"
      Role: !GetAtt LambdaRole.Arn

  TransactionTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  # My VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      InstanceTenancy: default
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      CidrIp: '0.0.0.0/0'
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public subnet 1
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public Subnet
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.192.0/21'
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Private subnet 1
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private Subnet
        - Key: Network
          Value: Private
  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  NAT1EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT1EIP
  NATGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: NATGateway1
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  InternetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table
  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref InternetRouteTable

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  WatchListUpdaterFunctionArn:
    Description: "Watchlist Updater Function ARN"
    Value: !GetAtt WatchListUpdaterFunction.Arn
  StockRankerFunctionArn:
    Description: "Stock Ranker FunctionARN"
    Value: !GetAtt StockRankerFunction.Arn